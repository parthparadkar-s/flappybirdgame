const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// Game Variables
const birdWidth = 40;
const birdHeight = 40;
const birdX = 50;
let birdY = 200;
let birdSpeed = 0;
let gravity = 0.5;
let jumpStrength = -10;
let isJumping = false;
let score = 0;
let highScore = localStorage.getItem('highScore') || 0;

// Pipe Variables
const pipeWidth = 60;
const pipeGap = 150;
let pipes = [];
let pipeSpeed = 2;

// Audio elements
const jumpSound = document.getElementById('jump-sound');
const collisionSound = document.getElementById('collision-sound');
const bgMusic = document.getElementById('bg-music');

// Game settings
const pipeInterval = 1500; // Milliseconds between pipe creation
let lastPipeTime = Date.now();
let gameOver = false;

// Event Listener for jumping
document.addEventListener('keydown', () => {
  if (!gameOver) {
    birdSpeed = jumpStrength; // Make the bird jump
    jumpSound.play(); // Play jump sound
  }
});

// Function to draw the bird
function drawBird() {
  ctx.fillStyle = 'yellow';
  ctx.fillRect(birdX, birdY, birdWidth, birdHeight);
}

// Function to create pipes
function createPipe() {
  const pipeHeight = Math.floor(Math.random() * (canvas.height - pipeGap));
  pipes.push({
    x: canvas.width,
    top: pipeHeight,
    bottom: pipeHeight + pipeGap
  });
}

// Function to draw the pipes
function drawPipes() {
  ctx.fillStyle = 'green';
  pipes.forEach(pipe => {
    // Top Pipe
    ctx.fillRect(pipe.x, 0, pipeWidth, pipe.top);
    // Bottom Pipe
    ctx.fillRect(pipe.x, pipe.bottom, pipeWidth, canvas.height - pipe.bottom);
  });
}

// Function to move pipes
function movePipes() {
  pipes.forEach(pipe => {
    pipe.x -= pipeSpeed;
  });
  // Remove pipes that are out of screen
  pipes = pipes.filter(pipe => pipe.x + pipeWidth > 0);
}

// Function to check for collisions
function checkCollisions() {
  // Collision with ground
  if (birdY + birdHeight >= canvas.height) {
    gameOver = true;
    collisionSound.play(); // Play collision sound
  }

  // Collision with pipes
  pipes.forEach(pipe => {
    if (birdX + birdWidth > pipe.x && birdX < pipe.x + pipeWidth) {
      if (birdY < pipe.top || birdY + birdHeight > pipe.bottom) {
        gameOver = true;
        collisionSound.play(); // Play collision sound
      }
    }
  });
}

// Function to update the score
function updateScore() {
  pipes.forEach(pipe => {
    if (pipe.x + pipeWidth === birdX) {
      score++;
    }
  });
}

// Function to draw score
function drawScore() {
  ctx.fillStyle = 'black';
  ctx.font = '20px Arial';
  ctx.fillText('Score: ' + score, 10, 30);
  ctx.fillText('High Score: ' + highScore, 10, 60);
}

// Function to update bird's position
function updateBird() {
  birdSpeed += gravity;
  birdY += birdSpeed;
}

// Function to update pipe speed based on score (difficulty)
function updatePipeSpeed() {
  if (score > 10 && score <= 20) {
    pipeSpeed = 3;
  } else if (score > 20 && score <= 30) {
    pipeSpeed = 4;
  } else if (score > 30) {
    pipeSpeed = 5;
  }
}

// Main game loop
function gameLoop() {
  if (gameOver) {
    // Update high score if needed
    if (score > highScore) {
      highScore = score;
      localStorage.setItem('highScore', highScore); // Save high score to local storage
    }

    ctx.fillStyle = 'black';
    ctx.font = '30px Arial';
    ctx.fillText('Game Over', canvas.width / 2 - 80, canvas.height / 2);
    ctx.fillText('Press F5 to Restart', canvas.width / 2 - 100, canvas.height / 2 + 40);
    return;
  }

  ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas

  updateBird(); // Update bird's position
  drawBird(); // Draw the bird

  if (Date.now() - lastPipeTime > pipeInterval) {
    createPipe();
    lastPipeTime = Date.now();
  }

  drawPipes(); // Draw the pipes
  movePipes(); // Move the pipes
  checkCollisions(); // Check for collisions
  updateScore(); // Update the score
  updatePipeSpeed(); // Increase pipe speed based on score
  drawScore(); // Draw the score

  requestAnimationFrame(gameLoop); // Call the game loop again
}

// Start background music when game starts
bgMusic.play();

// Start the game
gameLoop();
